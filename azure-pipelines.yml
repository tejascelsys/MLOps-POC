trigger:
- main

pr:
- main

variables:
  fabricWorkspace: $(fabricWorkspaceVar)  # Workspace ID
  artifactId: $(artifactIdVar)            # Notebook/Artifact ID
  azureTenantId: $(azureTenantIdVar)      # Azure Tenant ID
  clientId: $(clientIdVar)                # App Registration Client ID
  clientSecret: $(clientSecretVar)        # App Registration Client Secret (marked as secret)

jobs:
- job: RunFabricNotebook
  displayName: 'Run Notebook in Microsoft Fabric'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - script: |
        echo "Triggering Fabric Notebook Job..."

        # Function to get a new access token
        get_access_token() {
          echo "Requesting new access token..."
          token_response=$(curl --http1.1 -X POST "https://login.microsoftonline.com/${azureTenantId}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${clientId}&scope=https://api.fabric.microsoft.com/.default&client_secret=${clientSecret}&grant_type=client_credentials")
          access_token=$(echo $token_response | jq -r '.access_token')
          if [[ -z "$access_token" || "$access_token" == "null" ]]; then
            echo "Failed to retrieve access token."
            exit 1
          fi
          echo $access_token
        }

        # Function to trigger the notebook job
        trigger_notebook_job() {
          local token=$1
          echo "Sending API request with token..."
          response=$(curl --http1.1 -X POST "https://api.fabric.microsoft.com/v1/workspaces/${fabricWorkspace}/items/${artifactId}/jobs/instances?jobType=RunNotebook" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${token}" \
            -d '{
                  "executionData": {
                      "parameters": {},  # Add specific notebook parameters here if needed
                      "configuration": {
                          "conf": {
                              "spark.master": "yarn"
                          },                     
                          "defaultLakehouse": {
                              "name": "Electric_Vehicle",
                              "id": "d46bc1e7-cd79-4d30-95af-bdbeebeffe2e",
                              "workspaceId": "4e9ac160-b418-44de-99e1-874ff3fd479e"
                          },
                          "useStarterPool": false,
                          "useWorkspacePool": "StarterPool"
                      }
                  }
              }')
        echo "Response from Fabric API: $response"


          # Log the raw response for debugging
          echo "API Response: $response"

          # Check if the job was created successfully and print additional details
          job_instance_url=$(echo $response | jq -r '.Location')
          if [[ "$job_instance_url" != "null" ]]; then
            echo "Job successfully created. Monitor the job at: $job_instance_url"
          else
            echo "Failed to create job. Response: $response"
            exit 1
          fi
        }

        # Function to handle API response and retry if token expired
        handle_response() {
          local response=$1
          if echo "$response" | grep -q '"errorCode": "TokenExpired"'; then
            echo "Access token expired. Generating a new token and retrying..."
            access_token=$(get_access_token)
            response=$(trigger_notebook_job "$access_token")
            handle_response "$response"
          elif echo "$response" | grep -q "error"; then
            echo "An error occurred: $response"
            exit 1
          else
            echo "Notebook job triggered successfully."
          fi
        }

        # Main execution
        access_token=$(get_access_token)
        response=$(trigger_notebook_job "$access_token")
        handle_response "$response"
    displayName: 'Run Fabric Notebook'
